var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NewickTreeTools","category":"page"},{"location":"#NewickTreeTools","page":"Home","title":"NewickTreeTools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NewickTreeTools.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NewickTreeTools]","category":"page"},{"location":"#Clustering.Hclust-Tuple{Node}","page":"Home","title":"Clustering.Hclust","text":"Hclust(tree::Node)\n\nconvert ultrametric NewickTree.Node into Clustering.Hclust type\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.as_polytomy-Tuple{Function, Node}","page":"Home","title":"NewickTreeTools.as_polytomy","text":"as_polytomy(fun::Function, tree::NewickTree.Node)\nas_polytomy!(fun::Function, tree::NewickTree.Node)\n\nremoves internal nodes from tree based on fun()  which must return a true if node is to be removed\n\nby default removes zero length branches  (i.e. nodes where distance between child and parent == 0)\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.collectiveLCA-Tuple{AbstractArray{<:Node}}","page":"Home","title":"NewickTreeTools.collectiveLCA","text":"collectiveLCA(nodes)\n\nfinds last common ancester of a collection of Nodes\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.cuttree-Tuple{Function, Node, Any}","page":"Home","title":"NewickTreeTools.cuttree","text":"cuttree(distfun::Function, tree::NewickTree.Node, θ)\n\nreturns all vector of Nodes where distance to root is greater than theta d > θ.\n\ndistance function must take to NewickTree.Node objects and  compute a scaler distance between them.\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.getleafnames-Tuple{Node}","page":"Home","title":"NewickTreeTools.getleafnames","text":"getleafnames(t::NewickTree.Node)\n\nGet names of all the leafs with t as ancester\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.levelorder-Tuple{CategoricalArrays.CategoricalArray}","page":"Home","title":"NewickTreeTools.levelorder","text":"levelorder(v::CategoricalArray)\n\nGet catagories from CategoricalArray as Vector{Int}\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.majorityruletree-Tuple{Any}","page":"Home","title":"NewickTreeTools.majorityruletree","text":"Construct majority rule tree from tallylist (not well tested)\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.mapinternalnodes-Tuple{Function, Node, Vararg{Any}}","page":"Home","title":"NewickTreeTools.mapinternalnodes","text":"mapinternalnodes(fun::Function, tree::NewickTree.Node, args...; kwargs...)\n\nmaps function fun() across internal nodes of tree.\n\nargs and kwargs are passed to fun()\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.maplocalnodes-Tuple{Function, Node, Vararg{Any}}","page":"Home","title":"NewickTreeTools.maplocalnodes","text":"maplocalnodes(fun::Function, tree::NewickTree.Node, args...; kwargs...)\n\nmaps function fun() across internal nodes of tree conditioned on having     one direct child that is a leaf.\n\nargs and kwargs are passed to fun()\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.network_distance-Tuple{Node, Node}","page":"Home","title":"NewickTreeTools.network_distance","text":"network_distance(n::Node, m::Node)\n\nshortest traversal distance between two nodes\n\nsibling nodes would have network distance = 2\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.network_distances-Tuple{Node}","page":"Home","title":"NewickTreeTools.network_distances","text":"network_distances(t::Node)\n\nshortest traversal distance between all leafs with t as ancester sibling nodes would have network distance = 2\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.newick-Tuple{Hclust}","page":"Home","title":"NewickTreeTools.newick","text":"newick(hc::Hclust; justroot=true, names=string.(hc.labels))\n\nconvert Hclust to newick tree; returns root node \n\nArgs:\n\nhc, Hclust object from Clustering package\njustroot, Bool return just the root or the vector of all nodes\nnames, Vector{String} names in same order as distance matrix\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.patristic_distance-Tuple{Node, Node}","page":"Home","title":"NewickTreeTools.patristic_distance","text":"patristic_distance(n::Node, m::Node)\n\nshortest branch length path between two nodes.\n\nsibling nodes i, and j of parent p would have patristic distance(i, p) + distance(j, p)\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.patristic_distances-Tuple{Node}","page":"Home","title":"NewickTreeTools.patristic_distances","text":"patristic_distances(t::Node)\n\nshortest branch length path between all leafs with t as ancester\n\nsibling nodes i, and j of parent p would have patristic distance(i, p) + distance(j, p)\n\n\n\n\n\n","category":"method"},{"location":"#NewickTreeTools.tally_tree_bifurcations","page":"Home","title":"NewickTreeTools.tally_tree_bifurcations","text":"tally_tree_bifurcations(rootnode::AbstractTree, [cntr::Accumulator])\n\nreturns tally of leaf groups based on splitting tree at each internal node\n\nassumes nodenames are strings parsible to integers, and returns Accumulator with key as a string: 1110000 where 1 = belonging to smaller group & 0 = belonging to the larger. values are the number of times this split is observed. cntr is modified in place so using the same counter in multiple calls will keep a tally across multiple trees\n\n\n\n\n\n","category":"function"}]
}
